[
  {
    "objectID": "data.loading.html",
    "href": "data.loading.html",
    "title": "Loading",
    "section": "",
    "text": "get_spectra\n\n get_spectra (fname:str, org_name:str='organization',\n              id_name:str='sample_id',\n              wn_colrange:List[int]=range(2,1703))\n\nLoads spectra (features) & associated wavenumbers, organization name, sample ids\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfname\nstr\n\nfolder path containing data\n\n\norg_name\nstr\norganization\ncolumn name containing name of the organization\n\n\nid_name\nstr\nsample_id\ncolumn name containing name of the organization\n\n\nwn_colrange\nList\nrange(2, 1703)\ncolumn indices of wavenumbers\n\n\n\n\n\n\n\nfname = './files/RT_STD_allMIRspectra_raw.csv'\norgs, smp_ids, wns, spectra, df = get_spectra(fname)\n\n\ndf.head()\n\n\n\n\n\n  \n    \n      \n      organization\n      sample_id\n      600\n      602\n      604\n      606\n      608\n      610\n      612\n      614\n      ...\n      3982\n      3984\n      3986\n      3988\n      3990\n      3992\n      3994\n      3996\n      3998\n      4000\n    \n  \n  \n    \n      0\n      Agrocares\n      RT_01\n      2.14711\n      2.13471\n      2.12274\n      2.11369\n      2.10487\n      2.09844\n      2.09177\n      2.08036\n      ...\n      1.09917\n      1.09898\n      1.09877\n      1.09851\n      1.09827\n      1.09811\n      1.09797\n      1.09797\n      1.09797\n      1.09797\n    \n    \n      1\n      Agrocares\n      RT_02\n      2.32404\n      2.33516\n      2.34558\n      2.35114\n      2.35641\n      2.35855\n      2.36069\n      2.36288\n      ...\n      1.24065\n      1.24042\n      1.24015\n      1.23977\n      1.23938\n      1.23896\n      1.23861\n      1.23861\n      1.23861\n      1.23861\n    \n    \n      2\n      Agrocares\n      RT_03\n      2.50423\n      2.50755\n      2.50973\n      2.50403\n      2.49913\n      2.50261\n      2.50697\n      2.52910\n      ...\n      1.25036\n      1.24959\n      1.24877\n      1.24777\n      1.24679\n      1.24585\n      1.24505\n      1.24505\n      1.24505\n      1.24505\n    \n    \n      3\n      Agrocares\n      RT_04\n      2.30902\n      2.29788\n      2.28667\n      2.27490\n      2.26393\n      2.26128\n      2.25905\n      2.26521\n      ...\n      1.15192\n      1.15176\n      1.15158\n      1.15132\n      1.15106\n      1.15080\n      1.15058\n      1.15058\n      1.15058\n      1.15058\n    \n    \n      4\n      Agrocares\n      RT_05\n      2.28727\n      2.28852\n      2.29013\n      2.29434\n      2.29856\n      2.30286\n      2.30700\n      2.30782\n      ...\n      1.16109\n      1.16106\n      1.16102\n      1.16095\n      1.16086\n      1.16070\n      1.16056\n      1.16056\n      1.16056\n      1.16056\n    \n  \n\n5 rows × 1703 columns\n\n\n\n\nprint(f'orgs: {orgs}')\nprint(f'smp_ids: {smp_ids}')\nprint(f'wns: {wns}')\nprint(f'spectra shape: {spectra.shape}')\n\norgs: ['Agrocares' 'Agrocares' 'Agrocares' ... 'Woodwell_vertex'\n 'Woodwell_vertex' 'Woodwell_vertex']\nsmp_ids: ['RT_01' 'RT_02' 'RT_03' ... 'RT_68' 'RT_69' 'RT_70']\nwns: [ 600  602  604 ... 3996 3998 4000]\nspectra shape: (1118, 1701)\n\n\n\n\n\n\nget_wetchem\n\n get_wetchem (fname:str, analyte:str='clay_perc', dropna:bool=True)\n\nLoads wet chemistry (target)\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfname\nstr\n\nfolder path containing data\n\n\nanalyte\nstr\nclay_perc\nanalyte name\n\n\ndropna\nbool\nTrue\nwhether or not you want to get rid of NaN values\n\n\n\n\n\n\n\nfname = './files/RT_wetchem_soildata.csv'\ny, y_napt, df = get_wetchem(fname)\n\n\ndf.shape\n\n(70, 8)\n\n\n\ny\n\narray([ 6.28199   ,  4.44442   , 42.19991   , 17.10475   , 17.22985   ,\n       18.20389   , 17.07796   , 27.46067   , 12.91032   , 21.88833   ,\n       17.47756   , 41.04345   , 16.95715   ,  5.1238    , 15.98527   ,\n       21.40597   , 21.31223   , 21.5113    , 21.0915    , 38.90257   ,\n        2.19527   , 27.65285   ,  0.92417   , 12.71177   , 12.99189   ,\n       27.1811    , 26.85221   , 21.51316   , 21.31897   , 21.2085    ,\n       20.96345   , 39.79006   , 43.33046   , 24.97947   , 16.73154   ,\n       12.85499   , 13.04752   , 27.75883   , 36.70255   , 16.00733   ,\n       15.95912   , 22.71649246, 33.13734   ,  0.        , 39.87246   ,\n       41.92131   , 39.77298   , 30.38773   , 32.40552   , 17.04644   ,\n       18.67273   , 34.20548   , 39.75466   , 35.47979   , 43.45771   ,\n       17.35687   , 18.76691   , 29.71495   , 31.81229   , 15.38471   ])\n\n\n\ny_napt\n\narray([15.2,  4.1, 26.9,  3.6, 19.1, 25. , 28.4, 20. , 49.3,  8.4])"
  },
  {
    "objectID": "data.transform.html",
    "href": "data.transform.html",
    "title": "Transform",
    "section": "",
    "text": "#hide\nfrom nbdev.showdoc import *\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload"
  },
  {
    "objectID": "data.transform.html#target-variable",
    "href": "data.transform.html#target-variable",
    "title": "Transform",
    "section": "Target variable",
    "text": "Target variable\n\n\n\n\nlog_transform_y\n\n log_transform_y (data:tuple)\n\nLog-10 transform of the target value\n\n\n\n\nType\nDetails\n\n\n\n\ndata\ntuple\n(X, y, X_id, depth_order)"
  },
  {
    "objectID": "data.transform.html#features-spectra",
    "href": "data.transform.html#features-spectra",
    "title": "Transform",
    "section": "Features (spectra)",
    "text": "Features (spectra)\n\n\n\n\nTakeDerivative\n\n TakeDerivative (window_length=11, polyorder=1, deriv=1)\n\nCreates scikit-learn derivation custom transformer\n\n\n\n\nfname = './files/RT_STD_allMIRspectra_raw.csv'\norgs, smp_ids, X_names, X, _ = get_spectra(fname)\n\n\ntfm = TakeDerivative()\nplot_spectra(tfm.fit_transform(X), X_names, figsize=(12,4))\n\n\n\n\n\n\n\n\nSNV\n\n SNV ()\n\nCreates scikit-learn SNV custom transformer\n\n\n\n\ntfm = SNV()\nplot_spectra(tfm.fit_transform(X), X_names, figsize=(12,4))\n\n\n\n\n\nclass Center(BaseEstimator, TransformerMixin):\n    \"\"\"Creates scikit-learn Centering custom transformer\n\n    Args:\n        None\n\n    Returns:\n        scikit-learn custom transformer\n    \"\"\"\n    def __init__(self):\n        pass\n\n    def fit(self, X, y=None):\n        return self\n\n    def transform(self, X, y=None):\n        return X - np.mean(X, axis=1).reshape(-1, 1)\n\n\ntfm = Center()\nplot_spectra(tfm.fit_transform(X), X_names, figsize=(12,4))\n\n\n\n\n\n\n\n\nDropSpectralRegion\n\n DropSpectralRegion (wavenumbers, region=[2389,2269])\n\nCreates scikit-learn custom transformer dropping specific spectral region(s)\n\n\n\n\ntfm = DropSpectralRegion(X_names, region=CO2_REGION)\nplot_spectra(tfm.fit_transform(X), X_names, figsize=(12,4))"
  },
  {
    "objectID": "vis.core.html",
    "href": "vis.core.html",
    "title": "Visualization",
    "section": "",
    "text": "#hide\nfrom nbdev.showdoc import *\n\nThe autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload"
  },
  {
    "objectID": "vis.core.html#configs",
    "href": "vis.core.html#configs",
    "title": "Visualization",
    "section": "CONFIGS",
    "text": "CONFIGS\n\n\n\n\nset_style\n\n set_style (style:dict)\n\n\n\n\n\nType\nDetails\n\n\n\n\nstyle\ndict\nDictionary of plt.rcParams"
  },
  {
    "objectID": "vis.core.html#eda",
    "href": "vis.core.html#eda",
    "title": "Visualization",
    "section": "EDA",
    "text": "EDA\n\n\n\n\nplot_spectra\n\n plot_spectra (X:numpy.ndarray, X_names:numpy.ndarray,\n               ylabel:str='Absorbance', figsize=(18,5), sample=20)\n\nPlot Mid-infrared spectra\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nX\nndarray\n\nSpectra (n_samples, n_wavenumbers)\n\n\nX_names\nndarray\n\nWavenumbers (n_wavenumbers)\n\n\nylabel\nstr\nAbsorbance\ny axis label\n\n\nfigsize\ntuple\n(18, 5)\nWavenumbers\n\n\nsample\nint\n20\nSize of random subset\n\n\n\n\n\n\n\nfname = './files/RT_STD_allMIRspectra_raw.csv'\norgs, smp_ids, X_names, X, _ = get_spectra(fname)\n\n\nX.shape\n\n(1118, 1701)\n\n\n\nX_names\n\narray([ 600,  602,  604, ..., 3996, 3998, 4000])\n\n\n\nplot_spectra(X, X_names)"
  },
  {
    "objectID": "vis.core.html#validation-curves",
    "href": "vis.core.html#validation-curves",
    "title": "Visualization",
    "section": "Validation curves",
    "text": "Validation curves\n\n\n\n\nplot_validation_curve\n\n plot_validation_curve (x, losses, ax=None, plot_kwargs={},\n                        fill_between_kwargs={})"
  },
  {
    "objectID": "vis.core.html#learning-curves",
    "href": "vis.core.html#learning-curves",
    "title": "Visualization",
    "section": "Learning curves",
    "text": "Learning curves\n\n\n\n\nplot_learning_curve\n\n plot_learning_curve (x, losses_train, losses_valid, ax=None,\n                      train_kwargs={}, valid_kwargs={})\n\n\n\n\n\n\n\n\nplot_capacity\n\n plot_capacity (x, capacity, ax=None, **kwargs)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mirzoo",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "Mirzoo",
    "section": "Install",
    "text": "Install\npip install your_project_name"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Mirzoo",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:"
  },
  {
    "objectID": "05_workflow.eda.html",
    "href": "05_workflow.eda.html",
    "title": "mirzoo",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nfrom mirzoo.data.loading import get_spectra, get_wetchem\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# Data loading\nfname = './files/RT_STD_allMIRspectra_raw.csv'\norgs, smp_ids, wns, spectra, df_sp = get_spectra(fname)\n\nfname = './files/RT_wetchem_soildata.csv'\ny, y_napt, df = get_wetchem(fname)\n\n\ndf_sp.head()\n\n\n\n\n\n  \n    \n      \n      organization\n      sample_id\n      600\n      602\n      604\n      606\n      608\n      610\n      612\n      614\n      ...\n      3982\n      3984\n      3986\n      3988\n      3990\n      3992\n      3994\n      3996\n      3998\n      4000\n    \n  \n  \n    \n      0\n      Agrocares\n      RT_01\n      2.14711\n      2.13471\n      2.12274\n      2.11369\n      2.10487\n      2.09844\n      2.09177\n      2.08036\n      ...\n      1.09917\n      1.09898\n      1.09877\n      1.09851\n      1.09827\n      1.09811\n      1.09797\n      1.09797\n      1.09797\n      1.09797\n    \n    \n      1\n      Agrocares\n      RT_02\n      2.32404\n      2.33516\n      2.34558\n      2.35114\n      2.35641\n      2.35855\n      2.36069\n      2.36288\n      ...\n      1.24065\n      1.24042\n      1.24015\n      1.23977\n      1.23938\n      1.23896\n      1.23861\n      1.23861\n      1.23861\n      1.23861\n    \n    \n      2\n      Agrocares\n      RT_03\n      2.50423\n      2.50755\n      2.50973\n      2.50403\n      2.49913\n      2.50261\n      2.50697\n      2.52910\n      ...\n      1.25036\n      1.24959\n      1.24877\n      1.24777\n      1.24679\n      1.24585\n      1.24505\n      1.24505\n      1.24505\n      1.24505\n    \n    \n      3\n      Agrocares\n      RT_04\n      2.30902\n      2.29788\n      2.28667\n      2.27490\n      2.26393\n      2.26128\n      2.25905\n      2.26521\n      ...\n      1.15192\n      1.15176\n      1.15158\n      1.15132\n      1.15106\n      1.15080\n      1.15058\n      1.15058\n      1.15058\n      1.15058\n    \n    \n      4\n      Agrocares\n      RT_05\n      2.28727\n      2.28852\n      2.29013\n      2.29434\n      2.29856\n      2.30286\n      2.30700\n      2.30782\n      ...\n      1.16109\n      1.16106\n      1.16102\n      1.16095\n      1.16086\n      1.16070\n      1.16056\n      1.16056\n      1.16056\n      1.16056\n    \n  \n\n5 rows × 1703 columns\n\n\n\nWhat are the organizations involved?\n\ndf_sp['organization'].unique()\n\narray(['Agrocares', 'Argonne', 'ETH_alpha_1', 'ETH_alpha_2', 'ETH_vertex',\n       'IAEA_jun2022', 'KSSL', 'LandCare', 'Lesotho', 'MSU', 'OSU',\n       'UGhent', 'UIUC', 'UWisc_fine', 'Woodwell_alpha',\n       'Woodwell_vertex'], dtype=object)\n\n\nHow many samples per organization?\n\ndf_sp.groupby('organization').size()\n\norganization\nAgrocares          70\nArgonne            70\nETH_alpha_1        70\nETH_alpha_2        70\nETH_vertex         70\nIAEA_jun2022       68\nKSSL               70\nLandCare           70\nLesotho            70\nMSU                70\nOSU                70\nUGhent             70\nUIUC               70\nUWisc_fine         70\nWoodwell_alpha     70\nWoodwell_vertex    70\ndtype: int64\n\n\n\ndf_wc.head()\n\n\n\n\n\n  \n    \n      \n      sample_id\n      source\n      clay_perc\n      pH_H20\n      carbon_tot_perc\n      carbon_org_perc\n      potassium_cmolkg\n      phosporus_mgkg\n    \n  \n  \n    \n      0\n      RT_01\n      KSSL\n      6.28199\n      4.8525\n      0.61170\n      0.61170\n      0.26906\n      5.59999\n    \n    \n      1\n      RT_02\n      KSSL\n      4.44442\n      4.5850\n      3.48602\n      3.48602\n      0.23349\n      19.28365\n    \n    \n      2\n      RT_03\n      KSSL\n      42.19991\n      4.2300\n      0.25716\n      0.25716\n      0.29109\n      NaN\n    \n    \n      3\n      RT_04\n      KSSL\n      17.10475\n      6.5300\n      1.97755\n      1.97755\n      0.49925\n      NaN\n    \n    \n      4\n      RT_05\n      KSSL\n      17.22985\n      6.4700\n      2.14765\n      2.13584\n      0.59977\n      NaN\n    \n  \n\n\n\n\nWhere is wet chemistry coming from?\n\ndf_wc['source'].unique()\n\narray(['KSSL', 'NAPT'], dtype=object)\n\n\nWhat are analytes distribution for KSSL & NAPT wet chemistry?\n\nKSSL\n\n\nfig = plt.figure(figsize = (15,15))\nax = fig.gca()\ndf_wc.query('source==\"KSSL\"').hist(ax = ax);\n\n\n\n\n\nNAPT\n\n\nfig = plt.figure(figsize = (15,15))\nax = fig.gca()\ndf_wc.query('source==\"NAPT\"').hist(ax = ax);"
  },
  {
    "objectID": "04_workflow.plsr_local.pynb.html",
    "href": "04_workflow.plsr_local.pynb.html",
    "title": "PLSR local models",
    "section": "",
    "text": "import numpy as np\nfrom tqdm.auto import tqdm\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"ticks\", palette=\"tab10\")\n\nfrom mirzoo.data.transform import SNV, TakeDerivative, DropSpectralRegion, CO2_REGION\nfrom mirzoo.data.loading import get_spectra, get_wetchem\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\npd.set_option('display.max_rows', 500)\n\n\n# Data loading\nfname = './files/RT_STD_allMIRspectra_raw.csv'\norgs, smp_ids, X_names, X, df_sp = get_spectra(fname)\n\nfname = './files/RT_wetchem_soildata.csv'\ny, y_napt, df_wc = get_wetchem(fname)\n\n\n# By org, analyte, seed, n_cpts, r2_valid, r2_test, r2_napt\nresults = {'org': [], 'analyte': [], 'seed': [], 'n_cpt': [],\n           'r2_test': []}\n\ntest_size = 0.2\nn_seeds = 20\nfor org in tqdm(np.unique(orgs)):\n    for analyte in ['clay_perc', 'pH_H20', 'carbon_tot_perc', 'potassium_cmolkg']:\n        for seed in range(n_seeds):\n            mask = orgs == org\n            y, _, _  = get_wetchem(fname, analyte=analyte)\n            X_train, X_test, y_train, y_test = train_test_split(X[mask, :][:len(y),:], y,\n                                                                test_size=test_size,\n                                                                random_state=seed)\n\n            param_grid = {'model__n_components': range(1,10)}\n            pipe = Pipeline([('snv', SNV()),\n                             ('derivative', TakeDerivative(window_length=11, polyorder=1)),\n                             ('dropper', DropSpectralRegion(X_names, region=CO2_REGION)),\n                             ('model', PLSRegression(n_components=cpt))])\n            search = GridSearchCV(pipe, param_grid, scoring='r2', cv=5, n_jobs=8)\n            y_train = np.log(y_train) if analyte == 'carbon_tot_perc' else y_train\n            search.fit(X_train, y_train)\n\n            y_test = np.log(y_test) if analyte == 'carbon_tot_perc' else y_test\n            r2_test = r2_score(search.best_estimator_.predict(X_test), y_test)\n            results['org'].append(org)\n            results['analyte'].append(analyte)\n            results['seed'].append(seed)\n            results['n_cpt'].append(search.best_params_['model__n_components'])\n            results['r2_test'].append(r2_test)\n\ndf_results = pd.DataFrame(results)\n\n100%|█████████████████████████████████████████████████████████████| 16/16 [01:23<00:00,  5.21s/it]\n\n\n\ndef summarize(df, analyte):\n    print(60*'*')\n    print(f'Perfs by Lab. for: {analyte}')\n    print(60*'*')\n    print(df.query(f'analyte==\"{analyte}\"').groupby('org')\\\n              .agg({'r2_test': ['min', 'mean', 'max', 'std']})\\\n              .sort_values(by=('r2_test', 'mean'), ascending=False), '\\n')\n\n\nfor analyte in ['clay_perc', 'pH_H20', 'carbon_tot_perc', 'potassium_cmolkg']:\n    summarize(df_results, analyte)\n\n************************************************************\nPerfs by Lab. for: clay_perc\n************************************************************\n                  r2_test                              \n                      min      mean       max       std\norg                                                    \nUWisc_fine       0.178093  0.656488  0.936018  0.260874\nETH_alpha_1     -0.508152  0.544455  0.924210  0.377353\nOSU             -0.707323  0.541936  0.922453  0.423804\nLandCare        -0.488250  0.504200  0.901344  0.427323\nIAEA_jun2022    -1.273246  0.503280  0.877676  0.486752\nAgrocares       -0.704468  0.472487  0.890464  0.432991\nETH_vertex      -1.573527  0.457934  0.931692  0.603351\nETH_alpha_2     -0.760354  0.456645  0.922692  0.541053\nKSSL            -1.558192  0.449765  0.904910  0.595472\nArgonne         -1.012999  0.449282  0.932352  0.537677\nWoodwell_vertex -1.377850  0.439295  0.926852  0.564282\nWoodwell_alpha  -0.892172  0.435716  0.921947  0.483144\nMSU             -1.238345  0.426400  0.886168  0.542181\nUGhent          -0.916885  0.401400  0.808405  0.498846\nUIUC            -0.847892  0.353989  0.908219  0.538373\nLesotho         -1.425473  0.286443  0.849956  0.623638 \n\n************************************************************\nPerfs by Lab. for: pH_H20\n************************************************************\n                  r2_test                              \n                      min      mean       max       std\norg                                                    \nETH_alpha_2      0.785775  0.877084  0.952286  0.053691\nLandCare         0.543244  0.824632  0.949388  0.113661\nOSU              0.484043  0.819685  0.967352  0.122901\nMSU              0.424576  0.809280  0.981369  0.140128\nETH_vertex       0.476104  0.809022  0.958121  0.125089\nWoodwell_vertex  0.300934  0.795926  0.967437  0.166053\nWoodwell_alpha   0.335463  0.784208  0.948980  0.140042\nETH_alpha_1     -0.223086  0.782833  0.931811  0.248999\nUGhent           0.461243  0.770689  0.930678  0.133786\nArgonne         -0.484610  0.745401  0.974466  0.358125\nAgrocares       -0.679227  0.738194  0.938604  0.351604\nUWisc_fine       0.313911  0.728091  0.914928  0.141519\nIAEA_jun2022    -0.193188  0.690049  0.912069  0.238866\nUIUC            -0.456668  0.664576  0.933897  0.301270\nLesotho         -0.534319  0.653969  0.899322  0.323399\nKSSL             0.251747  0.639993  0.923779  0.205124 \n\n************************************************************\nPerfs by Lab. for: carbon_tot_perc\n************************************************************\n                  r2_test                              \n                      min      mean       max       std\norg                                                    \nETH_vertex      -0.078138  0.714297  0.990814  0.299195\nETH_alpha_2     -0.092123  0.632517  0.961546  0.318213\nKSSL             0.058734  0.632164  0.962343  0.259921\nIAEA_jun2022     0.093367  0.618851  0.953312  0.224335\nUIUC            -0.302081  0.595620  0.925192  0.331384\nArgonne         -0.118252  0.570524  0.962470  0.335361\nLandCare        -0.104873  0.568331  0.910589  0.289640\nLesotho         -0.053714  0.567884  0.941409  0.324473\nETH_alpha_1     -0.256038  0.557313  0.928682  0.384660\nMSU             -0.139407  0.548828  0.920547  0.364588\nOSU             -0.249676  0.547960  0.941116  0.381422\nWoodwell_vertex -0.222875  0.540166  0.960280  0.402546\nUWisc_fine      -0.166425  0.531294  0.903784  0.335054\nWoodwell_alpha  -0.229049  0.530461  0.918075  0.366165\nUGhent          -0.226492  0.504822  0.931010  0.376091\nAgrocares       -0.203351  0.494207  0.926288  0.383338 \n\n************************************************************\nPerfs by Lab. for: potassium_cmolkg\n************************************************************\n                  r2_test                              \n                      min      mean       max       std\norg                                                    \nUIUC            -0.754307  0.497910  0.802342  0.386704\nUWisc_fine      -0.778194  0.446613  0.937010  0.418366\nUGhent          -0.940722  0.275454  0.855022  0.478580\nIAEA_jun2022    -0.879679  0.243033  0.781161  0.467903\nMSU             -1.000342  0.239236  0.735249  0.451282\nKSSL            -0.902047  0.205174  0.793921  0.484777\nLandCare        -0.937053  0.205127  0.749980  0.428850\nLesotho         -0.633208  0.200510  0.768869  0.491648\nOSU             -1.043895  0.193253  0.741762  0.476801\nETH_alpha_2     -1.010123  0.184849  0.783952  0.482102\nWoodwell_alpha  -0.986063  0.167704  0.775271  0.507458\nWoodwell_vertex -1.292270  0.163559  0.790013  0.564836\nAgrocares       -1.004684  0.161944  0.782278  0.489327\nETH_vertex      -1.277752  0.148384  0.750745  0.586537\nArgonne         -1.464654  0.110927  0.785658  0.627748\nETH_alpha_1     -1.025221  0.106919  0.700957  0.506403 \n\n\n\n\nfig,ax = plt.subplots(1,1, figsize=(10,25))\nsns.boxplot(x='r2_test', y='org',hue='analyte',\n            width=0.6, dodge=True, ax=ax, data=df_results)\n\nsns.despine(offset=10, trim=True)"
  }
]